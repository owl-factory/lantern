datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String  @id @default(uuid()) @db.Uuid
  username        String  @unique @db.VarChar(64)
  displayName     String? @db.VarChar(64)
  avatarSrc       String?

  storageUsed     Int  @default(0)
  maximumStorage  Int  @default(0)

  userSecret      UserSecret?
  // TODO - subscription

  // Createable Items
  // These are required to be here
  ownedRulesets   Ruleset[] @relation(name: "rulesetOwner")
  createdRulesets Ruleset[] @relation(name: "rulesetCreator")
  updatedRulesets Ruleset[] @relation(name: "rulesetUpdater")
  deletedRulesets Ruleset[] @relation(name: "rulesetDeleter")
}

model UserSecret {
  id              String  @id @default(uuid()) @db.Uuid
  username        String  @unique @db.VarChar(64) // Duplicate of the User.username
  email           String  @unique @db.VarChar(64)
  passwordHash    String
  userID          String  @unique @db.Uuid
  user            User? @relation(fields: [userID], references: [id])
}

model Ruleset {
  id              String  @id @default(uuid()) @db.Uuid
  name            String  @db.VarChar(64)
  alias           String? @db.VarChar(64)
  ownedBy         String?  @db.Uuid
  owner           User?   @relation(name: "rulesetOwner", fields: [ownedBy], references: [id])
  isOfficial      Boolean @default(false)
  isPublished     Boolean @default(false)
  actorFields     Json    @default("{}")
  rules           Json    @default("{}")

  // Standard access tracking fields
  createdAt       DateTime?
  createdBy       String?  @db.Uuid
  creatingUser    User?   @relation(name: "rulesetCreator", fields: [createdBy], references: [id])
  updatedAt       DateTime?
  updatedBy       String?  @db.Uuid
  updatingUser    User?   @relation(name: "rulesetUpdater", fields: [updatedBy], references: [id])
  deletedAt       DateTime?
  deletedBy       String?  @db.Uuid
  deletingUser    User?   @relation(name: "rulesetDeleter", fields: [deletedBy], references: [id])
}